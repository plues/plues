import org.ajoberstar.grgit.Grgit

import java.time.Clock
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Add dependency for build script,
        // so we can access Git from our
        // build script.
        classpath 'org.ajoberstar.grgit:grgit-core:3.0.0'
    }
}
plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
    id "com.github.spotbugs" version "1.6.9"
    id 'checkstyle'
    id 'edu.sc.seis.launch4j' version '2.4.2'
    id "edu.sc.seis.macAppBundle" version "2.3.0"
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id "org.openjfx.javafxplugin" version "0.0.6" apply false
}


ext {
    git = Grgit.open(dir: System.getProperty("user.dir"))
    revision = git.head().id
}

checkstyle {
    toolVersion = "7.5.1"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "2.8.0-SNAPSHOT"

mainClassName = "de.hhu.stups.plues.ui.Main"

applicationDefaultJvmArgs = ["-Dapple.awt.UIElement=true"]
def appName = "plues-" + project.version

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        name "snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "releases"
        url "https://oss.sonatype.org/content/repositories/releases"
    }
    maven { url 'https://jitpack.io' }
    maven {
        // For the FontAwesomeFX fork that is compatible with Java 8 and 9:
        // https://github.com/xzel23/fontawesomefx
        name "dua3 Bintray"
        url "https://dl.bintray.com/dua3/public"
    }
}

dependencies {
    compile 'com.google.code.findbugs:annotations:3.0.1u2'
    compile 'org.apache.xmlgraphics:fop:2.2'
    compile 'org.apache.xmlgraphics:batik-i18n:1.9.1'
    compile 'org.apache.xmlgraphics:batik-constants:1.9.1'
    compile 'org.jtwig:jtwig-core:5.86.1.RELEASE'

    compile group: "de.jensd", name: "fontawesomefx-commons", version: "9.1.2-jpms"
    // Cannot update to the next higher version (4.7.0-9), because its class files are compiled for Java 9.
    compile group: "de.jensd", name: "fontawesomefx-fontawesome", version: "4.7.0-5"
    compile 'org.controlsfx:controlsfx:8.40.14'
    compile 'de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.5'

    compile group: 'org.fxmisc.easybind', name: 'easybind', version: '1.0.3'
    compile group: 'de.hhu.stups', name: 'de.prob2.kernel', version: '3.2.7'

    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'

    compile group: 'org.reactfx', name: 'reactfx', version: '2.0-M5'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.25' // MIT
    compile 'ch.qos.logback:logback-core:1.2.3' // EPL
    compile 'ch.qos.logback:logback-classic:1.2.3' // EPL
    compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.8'

    compile project(':model-generator')

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.13.+'
    testCompile group: 'com.jayway.awaitility', name: 'awaitility', version: '1.7.0'

    // provides org.testfx.api, org.testfx.matcher to the test source set.
    testCompile(group: "org.testfx", name: "testfx-core", version: "4.0.8-alpha")
    // provides org.testfx.framework.junit to the test source set.
    testCompile(group: "org.testfx", name: "testfx-junit", version: "4.0.8-alpha")
    testRuntime 'org.testfx:openjfx-monocle:1.8.0_20'
}

if (JavaVersion.current().java11Compatible) {
	apply plugin: "org.openjfx.javafxplugin"
	javafx {
		modules = [
			"javafx.base",
			"javafx.controls",
			"javafx.fxml",
			"javafx.graphics",
			"javafx.swing",
			"javafx.web",
		]
	}
}


launch4j {
    mainClassName = project.mainClassName
    outfile = appName + ".exe"
    version = project.version
    textVersion = project.version

    messagesStartupError = "Startup Error"
    messagesBundledJreError = "Bundled JRE Error"
    messagesLauncherError = "Launch Error"
    messagesJreVersionError = "JRE Version Error"
}

task winZip(dependsOn: "createExe", type: Zip) {
    def outdir = "${project.buildDir}/launch4j"
    // project.launch4j.outputDir not working as expected
    def libdir = "${project.buildDir}/launch4j/${project.launch4j.libraryDir}"
    def zipdir = "${project.buildDir}/distributions/"


    from(outdir) {
        include project.launch4j.outfile
        into ''
    }

    from(libdir) {
        include "*.jar"
        into 'lib'
    }

    archiveName appName + "-win.zip"
    destinationDir file(zipdir)
}

macAppBundle {
    appName = appName
    mainClassName = project.mainClassName
    icon = "icon.icns"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")

}
/*
 * Allows you to run the UI tests in headless mode by calling gradle with the -Pheadless=true argument
 */
if (project.hasProperty('headless') ? project.headless : false) {
    println "Running UI Tests Headless"
    test {
        jvmArgs = ['-Djava.awt.headless=true', '-Dtestfx.robot=glass', '-Dtestfx.headless=true', '-Dprism.order=sw', '-Dprism.text=t2k']
    }
}
test {
    environment "HEADLESS", project.hasProperty('headless')
}
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/data/entities/**'])
        })
    }
}

if (System.getenv('TRAVIS')) {
    println "Running on Travis"
    check.dependsOn jacocoTestReport
}

task createBuildConstants {
    doFirst {
        final File propertyFile = file "src/main/resources/plues-build.properties"
        if (propertyFile.exists()) {
            propertyFile.delete()
        }
        propertyFile.getParentFile().mkdirs()
        propertyFile.createNewFile()

        final Properties props = new Properties()
        propertyFile.withReader { props.load(it) }
        //
        final LocalDateTime now = LocalDateTime.now(Clock.systemUTC());
        props.setProperty("build_date", now.format(DateTimeFormatter.ISO_DATE_TIME));
        //
        props.setProperty("revision", revision.substring(0, 20));
        //
        propertyFile.withWriter { props.store(it, "GENERATED - Do not modify!!") }
    }
}

compileJava {
    dependsOn createBuildConstants
}
